package algorithms.mazeGenerators;

import java.util.*;

public class MyMazeGenerator extends AMazeGenerator {
    private Position help;

    @Override
    public Maze generate(int rows, int columns) {
        if (rows < 2 || columns < 2)
            throw new IllegalArgumentException("Parameters depth/row/column smaller then 2, Enter bigger numbers");
        ArrayList<Position> frontiers = new ArrayList<>();
        Random rand = new Random();
        Maze maze = new Maze(rows, columns);
        for (int i = 0; i < maze.getRows(); i++) {
            for (int j = 0; j < maze.getColumns(); j++) {
                maze.getMaze()[i][j] = 1;
                maze.setValueVisited(i, j, false);
            }
        }
        maze.getMaze()[maze.getStartPosition().getRowIndex()][maze.getStartPosition().getColumnIndex()] = 0;
        frontiers.add(maze.getStartPosition());
        while (!frontiers.isEmpty()) {
            int x = rand.nextInt(frontiers.size());
            Position newPos = new Position(0, 0);
            if (help != null) {
                openPath(frontiers.get(x).getFather(), frontiers.get(x), maze);
            }
            frontiers.addAll(getFrontier(frontiers.get(x), maze));
            help = newPos;
            maze.setValueVisited(frontiers.get(x).getRowIndex(), frontiers.get(x).getColumnIndex(), true);
            frontiers.remove(x);
        }
        this.help = null;
        maze.getMaze()[maze.getGoalPosition().getRowIndex()][maze.getGoalPosition().getColumnIndex()] = 0;
        maze.getMaze()[maze.getGoalPosition().getRowIndex() - 1][maze.getGoalPosition().getColumnIndex()] = 0;
        maze.getMaze()[maze.getGoalPosition().getRowIndex()][maze.getGoalPosition().getColumnIndex() - 1] = 0;
        return maze;
    }

    /**
     * @param pos represent position in maze
     * @param maze - a maze
     * @return arrayList of Positions that represent the cells in distance 2 from pos
     */
    public ArrayList<Position> getFrontier(Position pos, Maze maze) {
        if (pos == null || maze == null)
            throw new IllegalArgumentException("one or more parameters is null");
        ArrayList<Position> frontiers = new ArrayList<>();
        Position newPos;
        if (pos.getRowIndex() - 2 >= 0) {
            newPos = new Position(pos.getRowIndex() - 2, pos.getColumnIndex());
            if (!maze.getVisited(newPos.getRowIndex(), newPos.getColumnIndex())) {
                newPos.setFather(pos);
                frontiers.add(newPos);
                maze.setValueVisited(newPos.getRowIndex(), newPos.getColumnIndex(), true);
            }
        }
        if (pos.getRowIndex() + 2 < maze.getRows()) {
            newPos = new Position(pos.getRowIndex() + 2, pos.getColumnIndex());
            if (!maze.getVisited(newPos.getRowIndex(), newPos.getColumnIndex())) {
                newPos.setFather(pos);
                frontiers.add(newPos);
                maze.setValueVisited(newPos.getRowIndex(), newPos.getColumnIndex(), true);
            }
        }
        if (pos.getColumnIndex() - 2 >= 0) {
            newPos = new Position(pos.getRowIndex(), pos.getColumnIndex() - 2);
            if (!maze.getVisited(newPos.getRowIndex(), newPos.getColumnIndex())) {
                newPos.setFather(pos);
                frontiers.add(newPos);
                maze.setValueVisited(newPos.getRowIndex(), newPos.getColumnIndex(), true);
            }
        }
        if (pos.getColumnIndex() + 2 < maze.getColumns()) {
            newPos = new Position(pos.getRowIndex(), pos.getColumnIndex() + 2);
            if (!maze.getVisited(newPos.getRowIndex(), newPos.getColumnIndex())) {
                newPos.setFather(pos);
                frontiers.add(newPos);
                maze.setValueVisited(newPos.getRowIndex(), newPos.getColumnIndex(), true);
            }
        }
        return frontiers;

    }

    /** Opens path between 2 positions
     * @param pos1 represent position in maze
     * @param pos2 represent another position in maze
     * @param maze - a maze
     */
    public void openPath(Position pos1, Position pos2, Maze maze) {
        if (pos1 == null || pos2 == null || maze == null)
            throw new IllegalArgumentException("one or more parameters is null");
        if (pos1.getRowIndex() < pos2.getRowIndex()) {
            maze.getMaze()[pos1.getRowIndex() + 1][pos1.getColumnIndex()] = 0;
            maze.getMaze()[pos1.getRowIndex() + 2][pos1.getColumnIndex()] = 0;
            maze.setValueVisited(pos1.getRowIndex() + 1, pos1.getColumnIndex(), true);
            maze.setValueVisited(pos1.getRowIndex() + 2, pos1.getColumnIndex(), true);
            return;
        }
        if (pos1.getRowIndex() > pos2.getRowIndex()) {
            maze.getMaze()[pos1.getRowIndex() - 1][pos1.getColumnIndex()] = 0;
            maze.getMaze()[pos1.getRowIndex() - 2][pos1.getColumnIndex()] = 0;
            maze.setValueVisited(pos1.getRowIndex() - 1, pos1.getColumnIndex(), true);
            maze.setValueVisited(pos1.getRowIndex() - 2, pos1.getColumnIndex(), true);
            return;
        }
        if (pos1.getColumnIndex() < pos2.getColumnIndex()) {
            maze.getMaze()[pos1.getRowIndex()][pos1.getColumnIndex() + 1] = 0;
            maze.getMaze()[pos1.getRowIndex()][pos1.getColumnIndex() + 2] = 0;
            maze.setValueVisited(pos1.getRowIndex(), pos1.getColumnIndex() + 1, true);
            maze.setValueVisited(pos1.getRowIndex(), pos1.getColumnIndex() + 2, true);
            return;
        }
        if (pos1.getColumnIndex() > pos2.getColumnIndex()) {
            maze.getMaze()[pos1.getRowIndex()][pos1.getColumnIndex() - 1] = 0;
            maze.getMaze()[pos1.getRowIndex()][pos1.getColumnIndex() - 2] = 0;
            maze.setValueVisited(pos1.getRowIndex(), pos1.getColumnIndex() - 1, true);
            maze.setValueVisited(pos1.getRowIndex(), pos1.getColumnIndex() - 2, true);

            return;
        }
        return;
    }
}



